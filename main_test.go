package main

import (
	"testing"
)

func TestRemoveBadeNode(t *testing.T) {

	graph := [][]int{{1, 0, 0, 0}, {0, 1, 1, 1}, {1, 1, 1, 1}, {0, 1, 1, 1}}

	t.Logf("origin:  %v \n", graph)
	t.Logf("result: %v \n", removeBadNodeConnection(graph, 3))
}

func TestFindOutGoodNodeCount(t *testing.T) {

	graph := [][]int{{1, 0, 0, 0}, {0, 1, 1, 1}, {0, 1, 1, 1}, {0, 1, 1, 1}}

	t.Logf("origin:  %v \n", graph)
	t.Logf("result: %v \n", findOutGoodNodeCount(graph, []int{1}))

	graph = [][]int{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}
	t.Logf("origin:  %v \n", graph)
	t.Logf("result: %v \n", findOutGoodNodeCount(graph, []int{0, 1}))

	graph = [][]int{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}
	t.Logf("origin:  %v \n", graph)
	t.Logf("result: %v \n", findOutGoodNodeCount(graph, []int{0, 1}))

	graph = [][]int{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}
	t.Logf("origin:  %v \n", graph)
	t.Logf("result: %v \n", findOutGoodNodeCount(graph, []int{0, 1}))
}

func TestMinMalwareSpread(t *testing.T) {
	graph := [][]int{{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}

	bigestGoodNodeCountByremovedBadNode := minMalwareSpread(graph, []int{0, 1})

	for k, v := range bigestGoodNodeCountByremovedBadNode {
		t.Logf("goodNodeCount: %v    removeBadNode: %v \n", k, v)
	}
}
